
Robot_vychozi_CM5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ec  00800100  00000b8c  00000c20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000028d  008002ec  008002ec  00000e0c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000d0  00000000  00000000  00001560  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003714  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000646  00000000  00000000  00004d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000073e  00000000  00000000  0000538a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000460  00000000  00000000  00005ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ba4  00000000  00000000  00005f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001140  00000000  00000000  00007acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  00008c0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
   4:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   8:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  10:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  14:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  18:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  1c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  20:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  24:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  28:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  2c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  30:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  34:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  38:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  3c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  40:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_16>
  44:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  48:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__vector_18>
  4c:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__vector_19>
  50:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  54:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  58:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  5c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  60:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  68:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  6c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  70:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  74:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  78:	0c 94 c8 01 	jmp	0x390	; 0x390 <__vector_30>
  7c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_31>
  80:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  84:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  88:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>

0000008c <__ctors_start>:
  8c:	ab 05       	cpc	r26, r11

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d0 e1       	ldi	r29, 0x10	; 16
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	12 e0       	ldi	r17, 0x02	; 2
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	ec e8       	ldi	r30, 0x8C	; 140
  a2:	fb e0       	ldi	r31, 0x0B	; 11
  a4:	00 e0       	ldi	r16, 0x00	; 0
  a6:	0b bf       	out	0x3b, r16	; 59
  a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x14>
  aa:	07 90       	elpm	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	ac 3e       	cpi	r26, 0xEC	; 236
  b0:	b1 07       	cpc	r27, r17
  b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0x10>

000000b4 <__do_clear_bss>:
  b4:	15 e0       	ldi	r17, 0x05	; 5
  b6:	ac ee       	ldi	r26, 0xEC	; 236
  b8:	b2 e0       	ldi	r27, 0x02	; 2
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a9 37       	cpi	r26, 0x79	; 121
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>

000000c4 <__do_global_ctors>:
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	ce e8       	ldi	r28, 0x8E	; 142
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	00 e0       	ldi	r16, 0x00	; 0
  cc:	06 c0       	rjmp	.+12     	; 0xda <__do_global_ctors+0x16>
  ce:	22 97       	sbiw	r28, 0x02	; 2
  d0:	01 09       	sbc	r16, r1
  d2:	fe 01       	movw	r30, r28
  d4:	0b bf       	out	0x3b, r16	; 59
  d6:	0e 94 c0 05 	call	0xb80	; 0xb80 <__tablejump_elpm__>
  da:	cc 38       	cpi	r28, 0x8C	; 140
  dc:	d1 07       	cpc	r29, r17
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	08 07       	cpc	r16, r24
  e2:	a9 f7       	brne	.-22     	; 0xce <__do_global_ctors+0xa>
  e4:	0e 94 51 05 	call	0xaa2	; 0xaa2 <main>
  e8:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <_exit>

000000ec <__bad_interrupt>:
  ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f0 <_Z3absl>:
		pointer = 0;
	}
};

int32_t abs(int32_t n)
{
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
	return n<0?-n:n;
  f4:	8b 01       	movw	r16, r22
  f6:	9c 01       	movw	r18, r24
  f8:	37 ff       	sbrs	r19, 7
  fa:	07 c0       	rjmp	.+14     	; 0x10a <_Z3absl+0x1a>
  fc:	30 95       	com	r19
  fe:	20 95       	com	r18
 100:	10 95       	com	r17
 102:	01 95       	neg	r16
 104:	1f 4f       	sbci	r17, 0xFF	; 255
 106:	2f 4f       	sbci	r18, 0xFF	; 255
 108:	3f 4f       	sbci	r19, 0xFF	; 255
}
 10a:	b8 01       	movw	r22, r16
 10c:	c9 01       	movw	r24, r18
 10e:	1f 91       	pop	r17
 110:	0f 91       	pop	r16
 112:	08 95       	ret

00000114 <__vector_31>:
	}
	else
		state = 0;
}
ISR(USART1_UDRE_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	0b b6       	in	r0, 0x3b	; 59
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	2f 93       	push	r18
 124:	3f 93       	push	r19
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
	volatile uint16_t m_write;
public:
	volatile bool overwrite;
	bool is_empty() const
	{
		if(m_write == m_read)
 12e:	20 91 51 05 	lds	r18, 0x0551
 132:	30 91 52 05 	lds	r19, 0x0552
 136:	80 91 4f 05 	lds	r24, 0x054F
 13a:	90 91 50 05 	lds	r25, 0x0550
 13e:	28 17       	cp	r18, r24
 140:	39 07       	cpc	r19, r25
 142:	71 f4       	brne	.+28     	; 0x160 <__vector_31+0x4c>
 144:	07 c0       	rjmp	.+14     	; 0x154 <__vector_31+0x40>
		return true;
	}
	T pop ()
	{
		if(is_empty())
			return m[m_read];
 146:	20 81       	ld	r18, Z
 148:	29 c0       	rjmp	.+82     	; 0x19c <__vector_31+0x88>
		T data = m[m_read];
		if(++m_read == size)
			m_read = 0;
 14a:	10 92 50 05 	sts	0x0550, r1
 14e:	10 92 4f 05 	sts	0x054F, r1
 152:	24 c0       	rjmp	.+72     	; 0x19c <__vector_31+0x88>
{
	char data;
	if(pc.data_out(data))
		UDR1 = data;
	else
		UCSR1B &= ~(1<<UDRIE1);
 154:	80 91 9a 00 	lds	r24, 0x009A
 158:	8f 7d       	andi	r24, 0xDF	; 223
 15a:	80 93 9a 00 	sts	0x009A, r24
 15e:	20 c0       	rjmp	.+64     	; 0x1a0 <__vector_31+0x8c>
	volatile uint16_t m_write;
public:
	volatile bool overwrite;
	bool is_empty() const
	{
		if(m_write == m_read)
 160:	20 91 51 05 	lds	r18, 0x0551
 164:	30 91 52 05 	lds	r19, 0x0552
 168:	80 91 4f 05 	lds	r24, 0x054F
 16c:	90 91 50 05 	lds	r25, 0x0550
		return true;
	}
	T pop ()
	{
		if(is_empty())
			return m[m_read];
 170:	e0 91 4f 05 	lds	r30, 0x054F
 174:	f0 91 50 05 	lds	r31, 0x0550
 178:	e1 51       	subi	r30, 0x11	; 17
 17a:	fb 4f       	sbci	r31, 0xFB	; 251
	volatile uint16_t m_write;
public:
	volatile bool overwrite;
	bool is_empty() const
	{
		if(m_write == m_read)
 17c:	28 17       	cp	r18, r24
 17e:	39 07       	cpc	r19, r25
 180:	11 f3       	breq	.-60     	; 0x146 <__vector_31+0x32>
	}
	T pop ()
	{
		if(is_empty())
			return m[m_read];
		T data = m[m_read];
 182:	20 81       	ld	r18, Z
		if(++m_read == size)
 184:	80 91 4f 05 	lds	r24, 0x054F
 188:	90 91 50 05 	lds	r25, 0x0550
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	90 93 50 05 	sts	0x0550, r25
 192:	80 93 4f 05 	sts	0x054F, r24
 196:	80 36       	cpi	r24, 0x60	; 96
 198:	91 05       	cpc	r25, r1
 19a:	b9 f2       	breq	.-82     	; 0x14a <__vector_31+0x36>
}
ISR(USART1_UDRE_vect)
{
	char data;
	if(pc.data_out(data))
		UDR1 = data;
 19c:	20 93 9c 00 	sts	0x009C, r18
	else
		UCSR1B &= ~(1<<UDRIE1);
}
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0b be       	out	0x3b, r0	; 59
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <_Z8syncWaitm>:
Cekani
Funguje od 2 do 4294967294 us
Zadava se v us pro F_CPU 16000000
*/ 
void syncWait(uint32_t time)
{
 1ba:	ab 01       	movw	r20, r22
 1bc:	bc 01       	movw	r22, r24
	time -= 2;
 1be:	42 50       	subi	r20, 0x02	; 2
 1c0:	50 40       	sbci	r21, 0x00	; 0
 1c2:	60 40       	sbci	r22, 0x00	; 0
 1c4:	70 40       	sbci	r23, 0x00	; 0
	...
	__asm__ volatile ("nop");
	__asm__ volatile ("nop");
	__asm__ volatile ("nop");
	__asm__ volatile ("nop");
	__asm__ volatile ("nop");
	for(uint32_t i = 0; i < time; ++i)
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	dc 01       	movw	r26, r24
 1d8:	84 17       	cp	r24, r20
 1da:	95 07       	cpc	r25, r21
 1dc:	a6 07       	cpc	r26, r22
 1de:	b7 07       	cpc	r27, r23
 1e0:	48 f4       	brcc	.+18     	; 0x1f4 <_Z8syncWaitm+0x3a>
	...
	{
		for(uint8_t j = 0; j < 5; ++j)
		{
			__asm__ volatile ("nop");
 1ea:	00 00       	nop
	__asm__ volatile ("nop");
	__asm__ volatile ("nop");
	__asm__ volatile ("nop");
	__asm__ volatile ("nop");
	__asm__ volatile ("nop");
	for(uint32_t i = 0; i < time; ++i)
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	a1 1d       	adc	r26, r1
 1f0:	b1 1d       	adc	r27, r1
 1f2:	f2 cf       	rjmp	.-28     	; 0x1d8 <_Z8syncWaitm+0x1e>
 1f4:	08 95       	ret

000001f6 <_ZN11dynamixel_t7receiveEv.isra.1>:
		UCSR0B = (1<<TXEN0);
	}

	void receive()
	{
		PORTE = (PORTE & ~(1<<PE2))|(1<<PE3);
 1f6:	83 b1       	in	r24, 0x03	; 3
 1f8:	83 7f       	andi	r24, 0xF3	; 243
 1fa:	88 60       	ori	r24, 0x08	; 8
 1fc:	83 b9       	out	0x03, r24	; 3
		syncWait(10);
 1fe:	6a e0       	ldi	r22, 0x0A	; 10
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z8syncWaitm>
		UCSR0B = (1<<RXCIE0)|(1<<RXEN0);
 20a:	80 e9       	ldi	r24, 0x90	; 144
 20c:	8a b9       	out	0x0a, r24	; 10
	}
 20e:	08 95       	ret

00000210 <__vector_16>:
		return time;
	}
};

ISR(TIMER0_OVF_vect)
{
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
 21e:	af 93       	push	r26
 220:	bf 93       	push	r27
	g_stopwatch_tickCounter += 128;
 222:	80 91 86 04 	lds	r24, 0x0486
 226:	90 91 87 04 	lds	r25, 0x0487
 22a:	a0 91 88 04 	lds	r26, 0x0488
 22e:	b0 91 89 04 	lds	r27, 0x0489
 232:	80 58       	subi	r24, 0x80	; 128
 234:	9f 4f       	sbci	r25, 0xFF	; 255
 236:	af 4f       	sbci	r26, 0xFF	; 255
 238:	bf 4f       	sbci	r27, 0xFF	; 255
 23a:	80 93 86 04 	sts	0x0486, r24
 23e:	90 93 87 04 	sts	0x0487, r25
 242:	a0 93 88 04 	sts	0x0488, r26
 246:	b0 93 89 04 	sts	0x0489, r27
}
 24a:	bf 91       	pop	r27
 24c:	af 91       	pop	r26
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <_Z4waitRKm>:

void wait(const uint32_t &time)
{
 25c:	cf 92       	push	r12
 25e:	df 92       	push	r13
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	fc 01       	movw	r30, r24
	uint32_t time;
	bool running;
public:
	stopwatch()
	{
		offset = g_stopwatch_tickCounter + (TCNT0>>1);
 26a:	80 91 86 04 	lds	r24, 0x0486
 26e:	90 91 87 04 	lds	r25, 0x0487
 272:	a0 91 88 04 	lds	r26, 0x0488
 276:	b0 91 89 04 	lds	r27, 0x0489
 27a:	22 b7       	in	r18, 0x32	; 50
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	35 95       	asr	r19
 280:	27 95       	ror	r18
 282:	a9 01       	movw	r20, r18
 284:	66 27       	eor	r22, r22
 286:	57 fd       	sbrc	r21, 7
 288:	60 95       	com	r22
 28a:	76 2f       	mov	r23, r22
ISR(TIMER0_OVF_vect)
{
	g_stopwatch_tickCounter += 128;
}

void wait(const uint32_t &time)
 28c:	84 0f       	add	r24, r20
 28e:	95 1f       	adc	r25, r21
 290:	a6 1f       	adc	r26, r22
 292:	b7 1f       	adc	r27, r23
{
	stopwatch s;
	while(time > s.getTime()){}
 294:	c0 80       	ld	r12, Z
 296:	d1 80       	ldd	r13, Z+1	; 0x01
 298:	e2 80       	ldd	r14, Z+2	; 0x02
 29a:	f3 80       	ldd	r15, Z+3	; 0x03
		time = 0;
	}
	uint32_t getTime()
	{
		if(running)
			return g_stopwatch_tickCounter + (TCNT0>>1) - offset;
 29c:	40 91 86 04 	lds	r20, 0x0486
 2a0:	50 91 87 04 	lds	r21, 0x0487
 2a4:	60 91 88 04 	lds	r22, 0x0488
 2a8:	70 91 89 04 	lds	r23, 0x0489
 2ac:	22 b7       	in	r18, 0x32	; 50
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	35 95       	asr	r19
 2b2:	27 95       	ror	r18
 2b4:	f9 01       	movw	r30, r18
 2b6:	8f 01       	movw	r16, r30
 2b8:	22 27       	eor	r18, r18
 2ba:	17 fd       	sbrc	r17, 7
 2bc:	20 95       	com	r18
 2be:	32 2f       	mov	r19, r18
 2c0:	04 0f       	add	r16, r20
 2c2:	15 1f       	adc	r17, r21
 2c4:	26 1f       	adc	r18, r22
 2c6:	37 1f       	adc	r19, r23
 2c8:	08 1b       	sub	r16, r24
 2ca:	19 0b       	sbc	r17, r25
 2cc:	2a 0b       	sbc	r18, r26
 2ce:	3b 0b       	sbc	r19, r27
}

void wait(const uint32_t &time)
{
	stopwatch s;
	while(time > s.getTime()){}
 2d0:	0c 15       	cp	r16, r12
 2d2:	1d 05       	cpc	r17, r13
 2d4:	2e 05       	cpc	r18, r14
 2d6:	3f 05       	cpc	r19, r15
 2d8:	08 f3       	brcs	.-62     	; 0x29c <_Z4waitRKm+0x40>
}
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	df 90       	pop	r13
 2e4:	cf 90       	pop	r12
 2e6:	08 95       	ret

000002e8 <_Z5uchopv>:
}

void uchop()
{
	
}
 2e8:	08 95       	ret

000002ea <_ZN5queueIcLj96EE4pushEc>:
	{
		if((m_write == (m_read - 1))||((m_write == (size - 1))&&(m_read == 0)))
			return true;
		return false;
	}
	bool push (T data)
 2ea:	ac 01       	movw	r20, r24
	{
		m[m_write] = data;
 2ec:	fc 01       	movw	r30, r24
 2ee:	ee 59       	subi	r30, 0x9E	; 158
 2f0:	ff 4f       	sbci	r31, 0xFF	; 255
 2f2:	a0 81       	ld	r26, Z
 2f4:	b1 81       	ldd	r27, Z+1	; 0x01
 2f6:	a8 0f       	add	r26, r24
 2f8:	b9 1f       	adc	r27, r25
 2fa:	6c 93       	st	X, r22
			return true;
		return false;
	}
	bool is_full() const
	{
		if((m_write == (m_read - 1))||((m_write == (size - 1))&&(m_read == 0)))
 2fc:	20 81       	ld	r18, Z
 2fe:	31 81       	ldd	r19, Z+1	; 0x01
 300:	dc 01       	movw	r26, r24
 302:	a0 5a       	subi	r26, 0xA0	; 160
 304:	bf 4f       	sbci	r27, 0xFF	; 255
 306:	8d 91       	ld	r24, X+
 308:	9c 91       	ld	r25, X
 30a:	11 97       	sbiw	r26, 0x01	; 1
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	28 17       	cp	r18, r24
 310:	39 07       	cpc	r19, r25
 312:	51 f0       	breq	.+20     	; 0x328 <_ZN5queueIcLj96EE4pushEc+0x3e>
 314:	80 81       	ld	r24, Z
 316:	91 81       	ldd	r25, Z+1	; 0x01
 318:	8f 35       	cpi	r24, 0x5F	; 95
 31a:	91 05       	cpc	r25, r1
 31c:	89 f4       	brne	.+34     	; 0x340 <_ZN5queueIcLj96EE4pushEc+0x56>
 31e:	8d 91       	ld	r24, X+
 320:	9c 91       	ld	r25, X
 322:	11 97       	sbiw	r26, 0x01	; 1
 324:	00 97       	sbiw	r24, 0x00	; 0
 326:	61 f4       	brne	.+24     	; 0x340 <_ZN5queueIcLj96EE4pushEc+0x56>
		return false;
	}
	bool push (T data)
	{
		m[m_write] = data;
		if(is_full()&&!overwrite)
 328:	4c 59       	subi	r20, 0x9C	; 156
 32a:	5f 4f       	sbci	r21, 0xFF	; 255
 32c:	da 01       	movw	r26, r20
 32e:	8c 91       	ld	r24, X
 330:	88 23       	and	r24, r24
 332:	21 f0       	breq	.+8      	; 0x33c <_ZN5queueIcLj96EE4pushEc+0x52>
 334:	05 c0       	rjmp	.+10     	; 0x340 <_ZN5queueIcLj96EE4pushEc+0x56>
			return false;
		if(++m_write == size)
			m_write = 0;
 336:	11 82       	std	Z+1, r1	; 0x01
 338:	10 82       	st	Z, r1
 33a:	0a c0       	rjmp	.+20     	; 0x350 <_ZN5queueIcLj96EE4pushEc+0x66>
	}
	bool push (T data)
	{
		m[m_write] = data;
		if(is_full()&&!overwrite)
			return false;
 33c:	80 e0       	ldi	r24, 0x00	; 0
		if(++m_write == size)
			m_write = 0;
		return true;
	}
 33e:	08 95       	ret
	bool push (T data)
	{
		m[m_write] = data;
		if(is_full()&&!overwrite)
			return false;
		if(++m_write == size)
 340:	80 81       	ld	r24, Z
 342:	91 81       	ldd	r25, Z+1	; 0x01
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	91 83       	std	Z+1, r25	; 0x01
 348:	80 83       	st	Z, r24
 34a:	80 36       	cpi	r24, 0x60	; 96
 34c:	91 05       	cpc	r25, r1
 34e:	99 f3       	breq	.-26     	; 0x336 <_ZN5queueIcLj96EE4pushEc+0x4c>
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	08 95       	ret

00000354 <_ZN8USART1_t4sendEPKc>:
		UCSR1A |= (1<<TXC1);
		UDR1 = data;
		while((UCSR1A & (1<<TXC1)) == 0){}
	}

	void send(const char * str)
 354:	ff 92       	push	r15
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	eb 01       	movw	r28, r22
		cin_isFirst = true;
		cin_isGood = true;
	}
	void sendChar(char data)
	{
		while(!m_tx.push(data)) {}
 360:	8c 01       	movw	r16, r24
 362:	0b 59       	subi	r16, 0x9B	; 155
 364:	1f 4f       	sbci	r17, 0xFF	; 255
		while((UCSR1A & (1<<TXC1)) == 0){}
	}

	void send(const char * str)
	{
		for(; *str != 0; ++str)
 366:	0b c0       	rjmp	.+22     	; 0x37e <_ZN8USART1_t4sendEPKc+0x2a>
		cin_isFirst = true;
		cin_isGood = true;
	}
	void sendChar(char data)
	{
		while(!m_tx.push(data)) {}
 368:	c8 01       	movw	r24, r16
 36a:	6f 2d       	mov	r22, r15
 36c:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN5queueIcLj96EE4pushEc>
 370:	88 23       	and	r24, r24
 372:	d1 f3       	breq	.-12     	; 0x368 <_ZN8USART1_t4sendEPKc+0x14>
		UCSR1B |= (1<<UDRIE1);
 374:	80 91 9a 00 	lds	r24, 0x009A
 378:	80 62       	ori	r24, 0x20	; 32
 37a:	80 93 9a 00 	sts	0x009A, r24
		while((UCSR1A & (1<<TXC1)) == 0){}
	}

	void send(const char * str)
	{
		for(; *str != 0; ++str)
 37e:	f9 90       	ld	r15, Y+
 380:	ff 20       	and	r15, r15
 382:	91 f7       	brne	.-28     	; 0x368 <_ZN8USART1_t4sendEPKc+0x14>
			sendChar(*str);
	}
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	1f 91       	pop	r17
 38a:	0f 91       	pop	r16
 38c:	ff 90       	pop	r15
 38e:	08 95       	ret

00000390 <__vector_30>:
		cin_isGood = true;
	}
}; USART1_t pc;

ISR(USART1_RX_vect)
{
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	0b b6       	in	r0, 0x3b	; 59
 39a:	0f 92       	push	r0
 39c:	11 24       	eor	r1, r1
 39e:	2f 93       	push	r18
 3a0:	3f 93       	push	r19
 3a2:	4f 93       	push	r20
 3a4:	5f 93       	push	r21
 3a6:	6f 93       	push	r22
 3a8:	7f 93       	push	r23
 3aa:	8f 93       	push	r24
 3ac:	9f 93       	push	r25
 3ae:	af 93       	push	r26
 3b0:	bf 93       	push	r27
 3b2:	cf 93       	push	r28
 3b4:	ef 93       	push	r30
 3b6:	ff 93       	push	r31
	char data = UDR1;
 3b8:	c0 91 9c 00 	lds	r28, 0x009C
	if((UCSR1A & (1<<FE1)) == (1<<FE1))
 3bc:	80 91 9b 00 	lds	r24, 0x009B
 3c0:	84 fd       	sbrc	r24, 4
 3c2:	23 c0       	rjmp	.+70     	; 0x40a <__vector_30+0x7a>

public:

	void data_in(char &ch)
	{
		m_rx.push(ch);
 3c4:	8a e8       	ldi	r24, 0x8A	; 138
 3c6:	94 e0       	ldi	r25, 0x04	; 4
 3c8:	6c 2f       	mov	r22, r28
 3ca:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN5queueIcLj96EE4pushEc>
	if((UCSR1A & (1<<FE1)) == (1<<FE1))
		return;
	pc.data_in(data);
	static const unsigned char bootSeq[] = { '#', '#', '#', '#' };
	static uint8_t state = 0;
	if (data == bootSeq[state])
 3ce:	80 91 78 05 	lds	r24, 0x0578
 3d2:	e8 2f       	mov	r30, r24
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	e8 51       	subi	r30, 0x18	; 24
 3d8:	fd 4f       	sbci	r31, 0xFD	; 253
 3da:	90 81       	ld	r25, Z
 3dc:	c9 17       	cp	r28, r25
 3de:	99 f4       	brne	.+38     	; 0x406 <__vector_30+0x76>
	{
		if (++state == 4)
 3e0:	8f 5f       	subi	r24, 0xFF	; 255
 3e2:	80 93 78 05 	sts	0x0578, r24
 3e6:	84 30       	cpi	r24, 0x04	; 4
 3e8:	81 f4       	brne	.+32     	; 0x40a <__vector_30+0x7a>
		{
#ifndef DYNAMIXEL_BOOTLOADER_WDT
			UCSR1A = 0;
 3ea:	10 92 9b 00 	sts	0x009B, r1
			UCSR1B = 0;
 3ee:	10 92 9a 00 	sts	0x009A, r1
			UCSR1C = 0;
 3f2:	10 92 9d 00 	sts	0x009D, r1
			UBRR1L = 0;
 3f6:	10 92 99 00 	sts	0x0099, r1
			UBRR1H = 0;
 3fa:	10 92 98 00 	sts	0x0098, r1
			DYNAMIXEL_BOOTLOADER_SEQ();
 3fe:	f0 ef       	ldi	r31, 0xF0	; 240
 400:	e0 e0       	ldi	r30, 0x00	; 0
 402:	09 94       	ijmp
 404:	02 c0       	rjmp	.+4      	; 0x40a <__vector_30+0x7a>
			WDTCR |= (1<<WDE);
#endif
		}
	}
	else
		state = 0;
 406:	10 92 78 05 	sts	0x0578, r1
}
 40a:	ff 91       	pop	r31
 40c:	ef 91       	pop	r30
 40e:	cf 91       	pop	r28
 410:	bf 91       	pop	r27
 412:	af 91       	pop	r26
 414:	9f 91       	pop	r25
 416:	8f 91       	pop	r24
 418:	7f 91       	pop	r23
 41a:	6f 91       	pop	r22
 41c:	5f 91       	pop	r21
 41e:	4f 91       	pop	r20
 420:	3f 91       	pop	r19
 422:	2f 91       	pop	r18
 424:	0f 90       	pop	r0
 426:	0b be       	out	0x3b, r0	; 59
 428:	0f 90       	pop	r0
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	0f 90       	pop	r0
 42e:	1f 90       	pop	r1
 430:	18 95       	reti

00000432 <_ZN5queueIhLj96EE4pushEh>:
	{
		if((m_write == (m_read - 1))||((m_write == (size - 1))&&(m_read == 0)))
			return true;
		return false;
	}
	bool push (T data)
 432:	ac 01       	movw	r20, r24
	{
		m[m_write] = data;
 434:	fc 01       	movw	r30, r24
 436:	ee 59       	subi	r30, 0x9E	; 158
 438:	ff 4f       	sbci	r31, 0xFF	; 255
 43a:	a0 81       	ld	r26, Z
 43c:	b1 81       	ldd	r27, Z+1	; 0x01
 43e:	a8 0f       	add	r26, r24
 440:	b9 1f       	adc	r27, r25
 442:	6c 93       	st	X, r22
			return true;
		return false;
	}
	bool is_full() const
	{
		if((m_write == (m_read - 1))||((m_write == (size - 1))&&(m_read == 0)))
 444:	20 81       	ld	r18, Z
 446:	31 81       	ldd	r19, Z+1	; 0x01
 448:	dc 01       	movw	r26, r24
 44a:	a0 5a       	subi	r26, 0xA0	; 160
 44c:	bf 4f       	sbci	r27, 0xFF	; 255
 44e:	8d 91       	ld	r24, X+
 450:	9c 91       	ld	r25, X
 452:	11 97       	sbiw	r26, 0x01	; 1
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	28 17       	cp	r18, r24
 458:	39 07       	cpc	r19, r25
 45a:	51 f0       	breq	.+20     	; 0x470 <_ZN5queueIhLj96EE4pushEh+0x3e>
 45c:	80 81       	ld	r24, Z
 45e:	91 81       	ldd	r25, Z+1	; 0x01
 460:	8f 35       	cpi	r24, 0x5F	; 95
 462:	91 05       	cpc	r25, r1
 464:	89 f4       	brne	.+34     	; 0x488 <_ZN5queueIhLj96EE4pushEh+0x56>
 466:	8d 91       	ld	r24, X+
 468:	9c 91       	ld	r25, X
 46a:	11 97       	sbiw	r26, 0x01	; 1
 46c:	00 97       	sbiw	r24, 0x00	; 0
 46e:	61 f4       	brne	.+24     	; 0x488 <_ZN5queueIhLj96EE4pushEh+0x56>
		return false;
	}
	bool push (T data)
	{
		m[m_write] = data;
		if(is_full()&&!overwrite)
 470:	4c 59       	subi	r20, 0x9C	; 156
 472:	5f 4f       	sbci	r21, 0xFF	; 255
 474:	da 01       	movw	r26, r20
 476:	8c 91       	ld	r24, X
 478:	88 23       	and	r24, r24
 47a:	21 f0       	breq	.+8      	; 0x484 <_ZN5queueIhLj96EE4pushEh+0x52>
 47c:	05 c0       	rjmp	.+10     	; 0x488 <_ZN5queueIhLj96EE4pushEh+0x56>
			return false;
		if(++m_write == size)
			m_write = 0;
 47e:	11 82       	std	Z+1, r1	; 0x01
 480:	10 82       	st	Z, r1
 482:	0a c0       	rjmp	.+20     	; 0x498 <_ZN5queueIhLj96EE4pushEh+0x66>
	}
	bool push (T data)
	{
		m[m_write] = data;
		if(is_full()&&!overwrite)
			return false;
 484:	80 e0       	ldi	r24, 0x00	; 0
		if(++m_write == size)
			m_write = 0;
		return true;
	}
 486:	08 95       	ret
	bool push (T data)
	{
		m[m_write] = data;
		if(is_full()&&!overwrite)
			return false;
		if(++m_write == size)
 488:	80 81       	ld	r24, Z
 48a:	91 81       	ldd	r25, Z+1	; 0x01
 48c:	01 96       	adiw	r24, 0x01	; 1
 48e:	91 83       	std	Z+1, r25	; 0x01
 490:	80 83       	st	Z, r24
 492:	80 36       	cpi	r24, 0x60	; 96
 494:	91 05       	cpc	r25, r1
 496:	99 f3       	breq	.-26     	; 0x47e <_ZN5queueIhLj96EE4pushEh+0x4c>
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	08 95       	ret

0000049c <_ZN11dynamixel_t8sendCharEh>:
			return false;
		UCSR0A |= (1<<TXC0);
		return true;
	}

	void sendChar(uint8_t data)
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	16 2f       	mov	r17, r22
	{
		while(!m_tx.push(data)) {}
 4a4:	ec 01       	movw	r28, r24
 4a6:	cb 59       	subi	r28, 0x9B	; 155
 4a8:	df 4f       	sbci	r29, 0xFF	; 255
 4aa:	ce 01       	movw	r24, r28
 4ac:	61 2f       	mov	r22, r17
 4ae:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5queueIhLj96EE4pushEh>
 4b2:	88 23       	and	r24, r24
 4b4:	d1 f3       	breq	.-12     	; 0x4aa <_ZN11dynamixel_t8sendCharEh+0xe>
		//pc<<data<<'t';
		UCSR0B |= (1<<UDRIE0);
 4b6:	55 9a       	sbi	0x0a, 5	; 10
	}
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
 4be:	08 95       	ret

000004c0 <__vector_18>:
	}

}; dynamixel_t bus;

ISR(USART0_RX_vect)
{
 4c0:	1f 92       	push	r1
 4c2:	0f 92       	push	r0
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	0f 92       	push	r0
 4c8:	0b b6       	in	r0, 0x3b	; 59
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	2f 93       	push	r18
 4d0:	3f 93       	push	r19
 4d2:	4f 93       	push	r20
 4d4:	5f 93       	push	r21
 4d6:	6f 93       	push	r22
 4d8:	7f 93       	push	r23
 4da:	8f 93       	push	r24
 4dc:	9f 93       	push	r25
 4de:	af 93       	push	r26
 4e0:	bf 93       	push	r27
 4e2:	cf 93       	push	r28
 4e4:	ef 93       	push	r30
 4e6:	ff 93       	push	r31
	char ch = UDR0;
 4e8:	cc b1       	in	r28, 0x0c	; 12
	if((UCSR0A & (1<<FE0)) == (1<<FE0))
 4ea:	5c 99       	sbic	0x0b, 4	; 11
 4ec:	07 c0       	rjmp	.+14     	; 0x4fc <__vector_18+0x3c>

public:

	void data_in(const uint8_t &ch)
	{
		while(!m_rx.push(ch)) {}
 4ee:	8c eb       	ldi	r24, 0xBC	; 188
 4f0:	93 e0       	ldi	r25, 0x03	; 3
 4f2:	6c 2f       	mov	r22, r28
 4f4:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5queueIhLj96EE4pushEh>
 4f8:	88 23       	and	r24, r24
 4fa:	c9 f3       	breq	.-14     	; 0x4ee <__vector_18+0x2e>
{
	char ch = UDR0;
	if((UCSR0A & (1<<FE0)) == (1<<FE0))
		return;
	bus.data_in(ch);
}
 4fc:	ff 91       	pop	r31
 4fe:	ef 91       	pop	r30
 500:	cf 91       	pop	r28
 502:	bf 91       	pop	r27
 504:	af 91       	pop	r26
 506:	9f 91       	pop	r25
 508:	8f 91       	pop	r24
 50a:	7f 91       	pop	r23
 50c:	6f 91       	pop	r22
 50e:	5f 91       	pop	r21
 510:	4f 91       	pop	r20
 512:	3f 91       	pop	r19
 514:	2f 91       	pop	r18
 516:	0f 90       	pop	r0
 518:	0b be       	out	0x3b, r0	; 59
 51a:	0f 90       	pop	r0
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	0f 90       	pop	r0
 520:	1f 90       	pop	r1
 522:	18 95       	reti

00000524 <_ZN5queueIhLj96EE3popEv>:
			return false;
		if(++m_write == size)
			m_write = 0;
		return true;
	}
	T pop ()
 524:	ac 01       	movw	r20, r24
	volatile uint16_t m_write;
public:
	volatile bool overwrite;
	bool is_empty() const
	{
		if(m_write == m_read)
 526:	fc 01       	movw	r30, r24
 528:	ee 59       	subi	r30, 0x9E	; 158
 52a:	ff 4f       	sbci	r31, 0xFF	; 255
 52c:	20 81       	ld	r18, Z
 52e:	31 81       	ldd	r19, Z+1	; 0x01
 530:	fc 01       	movw	r30, r24
 532:	e0 5a       	subi	r30, 0xA0	; 160
 534:	ff 4f       	sbci	r31, 0xFF	; 255
 536:	80 81       	ld	r24, Z
 538:	91 81       	ldd	r25, Z+1	; 0x01
 53a:	28 17       	cp	r18, r24
 53c:	39 07       	cpc	r19, r25
 53e:	51 f4       	brne	.+20     	; 0x554 <_ZN5queueIhLj96EE3popEv+0x30>
		return true;
	}
	T pop ()
	{
		if(is_empty())
			return m[m_read];
 540:	01 90       	ld	r0, Z+
 542:	f0 81       	ld	r31, Z
 544:	e0 2d       	mov	r30, r0
 546:	e4 0f       	add	r30, r20
 548:	f5 1f       	adc	r31, r21
 54a:	80 81       	ld	r24, Z
 54c:	08 95       	ret
		T data = m[m_read];
		if(++m_read == size)
			m_read = 0;
 54e:	11 82       	std	Z+1, r1	; 0x01
 550:	10 82       	st	Z, r1
		return data;
	}
 552:	08 95       	ret
	}
	T pop ()
	{
		if(is_empty())
			return m[m_read];
		T data = m[m_read];
 554:	a0 81       	ld	r26, Z
 556:	b1 81       	ldd	r27, Z+1	; 0x01
 558:	a4 0f       	add	r26, r20
 55a:	b5 1f       	adc	r27, r21
 55c:	8c 91       	ld	r24, X
		if(++m_read == size)
 55e:	20 81       	ld	r18, Z
 560:	31 81       	ldd	r19, Z+1	; 0x01
 562:	2f 5f       	subi	r18, 0xFF	; 255
 564:	3f 4f       	sbci	r19, 0xFF	; 255
 566:	31 83       	std	Z+1, r19	; 0x01
 568:	20 83       	st	Z, r18
 56a:	20 36       	cpi	r18, 0x60	; 96
 56c:	31 05       	cpc	r19, r1
 56e:	89 f7       	brne	.-30     	; 0x552 <_ZN5queueIhLj96EE3popEv+0x2e>
 570:	ee cf       	rjmp	.-36     	; 0x54e <_ZN5queueIhLj96EE3popEv+0x2a>

00000572 <_ZN11dynamixel_t4peekERh>:
	void wait()
	{
		while(!is_send()) {}
	}

	bool peek(uint8_t & data)
 572:	cf 93       	push	r28
 574:	df 93       	push	r29
 576:	eb 01       	movw	r28, r22
	volatile uint16_t m_write;
public:
	volatile bool overwrite;
	bool is_empty() const
	{
		if(m_write == m_read)
 578:	fc 01       	movw	r30, r24
 57a:	ee 59       	subi	r30, 0x9E	; 158
 57c:	ff 4f       	sbci	r31, 0xFF	; 255
 57e:	40 81       	ld	r20, Z
 580:	51 81       	ldd	r21, Z+1	; 0x01
 582:	fc 01       	movw	r30, r24
 584:	e0 5a       	subi	r30, 0xA0	; 160
 586:	ff 4f       	sbci	r31, 0xFF	; 255
 588:	20 81       	ld	r18, Z
 58a:	31 81       	ldd	r19, Z+1	; 0x01
 58c:	42 17       	cp	r20, r18
 58e:	53 07       	cpc	r21, r19
 590:	21 f4       	brne	.+8      	; 0x59a <_ZN11dynamixel_t4peekERh+0x28>
	}

	bool peek(uint8_t & data)
	{
		if(m_rx.is_empty())
			return false;
 592:	80 e0       	ldi	r24, 0x00	; 0
		data = m_rx.pop();
		return true;
	}
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	08 95       	ret

	bool peek(uint8_t & data)
	{
		if(m_rx.is_empty())
			return false;
		data = m_rx.pop();
 59a:	0e 94 92 02 	call	0x524	; 0x524 <_ZN5queueIhLj96EE3popEv>
 59e:	88 83       	st	Y, r24
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	f8 cf       	rjmp	.-16     	; 0x594 <_ZN11dynamixel_t4peekERh+0x22>

000005a4 <_ZN11dynamixel_t3comEhhPhjhmj>:
		}
		return 0;
	}
#endif
#if 1
	int com(uint8_t ID, uint8_t instruction, uint8_t *data, uint16_t Tlength, uint8_t Rlength, uint32_t retWait, uint16_t max_time = 500)
 5a4:	4f 92       	push	r4
 5a6:	5f 92       	push	r5
 5a8:	6f 92       	push	r6
 5aa:	7f 92       	push	r7
 5ac:	8f 92       	push	r8
 5ae:	9f 92       	push	r9
 5b0:	af 92       	push	r10
 5b2:	bf 92       	push	r11
 5b4:	cf 92       	push	r12
 5b6:	df 92       	push	r13
 5b8:	ef 92       	push	r14
 5ba:	ff 92       	push	r15
 5bc:	0f 93       	push	r16
 5be:	1f 93       	push	r17
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	00 d0       	rcall	.+0      	; 0x5c6 <_ZN11dynamixel_t3comEhhPhjhmj+0x22>
 5c6:	cd b7       	in	r28, 0x3d	; 61
 5c8:	de b7       	in	r29, 0x3e	; 62
 5ca:	6c 01       	movw	r12, r24
 5cc:	76 2e       	mov	r7, r22
 5ce:	29 01       	movw	r4, r18
 5d0:	6e 2c       	mov	r6, r14
	{
		uint8_t checksum = ID + Tlength + 2 + instruction;
 5d2:	e0 2e       	mov	r14, r16
 5d4:	26 2f       	mov	r18, r22
 5d6:	2e 5f       	subi	r18, 0xFE	; 254
 5d8:	24 0f       	add	r18, r20
 5da:	20 0f       	add	r18, r16
		for(uint8_t i = 0; i < Tlength; ++i)
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	06 c0       	rjmp	.+12     	; 0x5ec <_ZN11dynamixel_t3comEhhPhjhmj+0x48>
			checksum += *(data+i);
 5e0:	84 0d       	add	r24, r4
 5e2:	95 1d       	adc	r25, r5
 5e4:	fc 01       	movw	r30, r24
 5e6:	80 81       	ld	r24, Z
 5e8:	28 0f       	add	r18, r24
#endif
#if 1
	int com(uint8_t ID, uint8_t instruction, uint8_t *data, uint16_t Tlength, uint8_t Rlength, uint32_t retWait, uint16_t max_time = 500)
	{
		uint8_t checksum = ID + Tlength + 2 + instruction;
		for(uint8_t i = 0; i < Tlength; ++i)
 5ea:	3f 5f       	subi	r19, 0xFF	; 255
 5ec:	83 2f       	mov	r24, r19
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	80 17       	cp	r24, r16
 5f2:	91 07       	cpc	r25, r17
 5f4:	a8 f3       	brcs	.-22     	; 0x5e0 <_ZN11dynamixel_t3comEhhPhjhmj+0x3c>
			checksum += *(data+i);
		checksum = ~checksum;
 5f6:	f2 2e       	mov	r15, r18
 5f8:	f0 94       	com	r15
		uint8_t returned = 0;
 5fa:	19 82       	std	Y+1, r1	; 0x01

//linka

	void transmit()
	{
		PORTE = (PORTE & ~(1<<PE3))|(1<<PE2);
 5fc:	83 b1       	in	r24, 0x03	; 3
 5fe:	83 7f       	andi	r24, 0xF3	; 243
 600:	84 60       	ori	r24, 0x04	; 4
 602:	83 b9       	out	0x03, r24	; 3
		UCSR0B = (1<<TXEN0);
 604:	88 e0       	ldi	r24, 0x08	; 8
 606:	8a b9       	out	0x0a, r24	; 10
		for(uint8_t i = 0; i < Tlength; ++i)
			checksum += *(data+i);
		checksum = ~checksum;
		uint8_t returned = 0;
		transmit();
		sendChar(0xFF);
 608:	c6 01       	movw	r24, r12
 60a:	6f ef       	ldi	r22, 0xFF	; 255
 60c:	4a 83       	std	Y+2, r20	; 0x02
 60e:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN11dynamixel_t8sendCharEh>
		sendChar(0xFF);
 612:	c6 01       	movw	r24, r12
 614:	6f ef       	ldi	r22, 0xFF	; 255
 616:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN11dynamixel_t8sendCharEh>
		sendChar(ID);
 61a:	c6 01       	movw	r24, r12
 61c:	67 2d       	mov	r22, r7
 61e:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN11dynamixel_t8sendCharEh>
		sendChar(Tlength + 2);
 622:	6e 2d       	mov	r22, r14
 624:	6e 5f       	subi	r22, 0xFE	; 254
 626:	c6 01       	movw	r24, r12
 628:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN11dynamixel_t8sendCharEh>
		sendChar(instruction);
 62c:	c6 01       	movw	r24, r12
 62e:	4a 81       	ldd	r20, Y+2	; 0x02
 630:	64 2f       	mov	r22, r20
 632:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN11dynamixel_t8sendCharEh>
 636:	a4 2c       	mov	r10, r4
 638:	82 01       	movw	r16, r4
 63a:	06 c0       	rjmp	.+12     	; 0x648 <_ZN11dynamixel_t3comEhhPhjhmj+0xa4>
	}

	void send(uint8_t * data, uint8_t length)
	{
		for(uint8_t i = 0; i < length; ++i)
			sendChar(*(data + i));
 63c:	f8 01       	movw	r30, r16
 63e:	61 91       	ld	r22, Z+
 640:	8f 01       	movw	r16, r30
 642:	c6 01       	movw	r24, r12
 644:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN11dynamixel_t8sendCharEh>
		return true;
	}

	void send(uint8_t * data, uint8_t length)
	{
		for(uint8_t i = 0; i < length; ++i)
 648:	80 2f       	mov	r24, r16
 64a:	8a 19       	sub	r24, r10
 64c:	8e 15       	cp	r24, r14
 64e:	b0 f3       	brcs	.-20     	; 0x63c <_ZN11dynamixel_t3comEhhPhjhmj+0x98>
		sendChar(0xFF);
		sendChar(ID);
		sendChar(Tlength + 2);
		sendChar(instruction);
		send(data, Tlength);
		sendChar(checksum);
 650:	c6 01       	movw	r24, r12
 652:	6f 2d       	mov	r22, r15
 654:	0e 94 4e 02 	call	0x49c	; 0x49c <_ZN11dynamixel_t8sendCharEh>
	volatile uint16_t m_write;
public:
	volatile bool overwrite;
	bool is_empty() const
	{
		if(m_write == m_read)
 658:	f6 01       	movw	r30, r12
 65a:	e9 53       	subi	r30, 0x39	; 57
 65c:	ff 4f       	sbci	r31, 0xFF	; 255
 65e:	d6 01       	movw	r26, r12
 660:	ab 53       	subi	r26, 0x3B	; 59
 662:	bf 4f       	sbci	r27, 0xFF	; 255
 664:	80 81       	ld	r24, Z
 666:	91 81       	ldd	r25, Z+1	; 0x01
 668:	2d 91       	ld	r18, X+
 66a:	3c 91       	ld	r19, X
 66c:	11 97       	sbiw	r26, 0x01	; 1
 66e:	82 17       	cp	r24, r18
 670:	93 07       	cpc	r25, r19
 672:	09 f0       	breq	.+2      	; 0x676 <_ZN11dynamixel_t3comEhhPhjhmj+0xd2>
 674:	7c c0       	rjmp	.+248    	; 0x76e <_ZN11dynamixel_t3comEhhPhjhmj+0x1ca>
 676:	7d c0       	rjmp	.+250    	; 0x772 <_ZN11dynamixel_t3comEhhPhjhmj+0x1ce>
		sendChar(instruction);
		send(data, Tlength);
		sendChar(checksum);
		wait();
		receive();
		while(!peek(returned) || returned != 255) {}
 678:	c6 01       	movw	r24, r12
 67a:	be 01       	movw	r22, r28
 67c:	6f 5f       	subi	r22, 0xFF	; 255
 67e:	7f 4f       	sbci	r23, 0xFF	; 255
 680:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN11dynamixel_t4peekERh>
 684:	88 23       	and	r24, r24
 686:	c1 f3       	breq	.-16     	; 0x678 <_ZN11dynamixel_t3comEhhPhjhmj+0xd4>
 688:	89 81       	ldd	r24, Y+1	; 0x01
 68a:	8f 3f       	cpi	r24, 0xFF	; 255
 68c:	a9 f7       	brne	.-22     	; 0x678 <_ZN11dynamixel_t3comEhhPhjhmj+0xd4>
		//pc<<returned<<'r';
		while(!peek(returned) || returned != 255) {}
 68e:	c6 01       	movw	r24, r12
 690:	be 01       	movw	r22, r28
 692:	6f 5f       	subi	r22, 0xFF	; 255
 694:	7f 4f       	sbci	r23, 0xFF	; 255
 696:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN11dynamixel_t4peekERh>
 69a:	88 23       	and	r24, r24
 69c:	c1 f3       	breq	.-16     	; 0x68e <_ZN11dynamixel_t3comEhhPhjhmj+0xea>
 69e:	89 81       	ldd	r24, Y+1	; 0x01
 6a0:	8f 3f       	cpi	r24, 0xFF	; 255
 6a2:	a9 f7       	brne	.-22     	; 0x68e <_ZN11dynamixel_t3comEhhPhjhmj+0xea>
		//pc<<returned<<'r';
		while(!peek(returned) || returned !=  ID) {}
 6a4:	c6 01       	movw	r24, r12
 6a6:	be 01       	movw	r22, r28
 6a8:	6f 5f       	subi	r22, 0xFF	; 255
 6aa:	7f 4f       	sbci	r23, 0xFF	; 255
 6ac:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN11dynamixel_t4peekERh>
 6b0:	88 23       	and	r24, r24
 6b2:	c1 f3       	breq	.-16     	; 0x6a4 <_ZN11dynamixel_t3comEhhPhjhmj+0x100>
 6b4:	89 81       	ldd	r24, Y+1	; 0x01
 6b6:	87 15       	cp	r24, r7
 6b8:	a9 f7       	brne	.-22     	; 0x6a4 <_ZN11dynamixel_t3comEhhPhjhmj+0x100>
		//pc<<returned<<'r';
		while(!peek(returned)){}
 6ba:	c6 01       	movw	r24, r12
 6bc:	be 01       	movw	r22, r28
 6be:	6f 5f       	subi	r22, 0xFF	; 255
 6c0:	7f 4f       	sbci	r23, 0xFF	; 255
 6c2:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN11dynamixel_t4peekERh>
 6c6:	88 23       	and	r24, r24
 6c8:	c1 f3       	breq	.-16     	; 0x6ba <_ZN11dynamixel_t3comEhhPhjhmj+0x116>
		//pc<<returned<<"re";
		uint8_t a = get(data, (returned - 1), max_time);
 6ca:	09 81       	ldd	r16, Y+1	; 0x01
 6cc:	10 2f       	mov	r17, r16
 6ce:	11 50       	subi	r17, 0x01	; 1
 6d0:	52 01       	movw	r10, r4
 6d2:	14 c0       	rjmp	.+40     	; 0x6fc <_ZN11dynamixel_t3comEhhPhjhmj+0x158>
		uint8_t received = length;
		while(length-- != 0)
		{
			while(!peek(*data))
			{
				if(++waiting == max_time)
 6d4:	08 94       	sec
 6d6:	e1 1c       	adc	r14, r1
 6d8:	f1 1c       	adc	r15, r1
 6da:	e8 14       	cp	r14, r8
 6dc:	f9 04       	cpc	r15, r9
 6de:	21 f4       	brne	.+8      	; 0x6e8 <_ZN11dynamixel_t3comEhhPhjhmj+0x144>
				{
					--received;
 6e0:	11 50       	subi	r17, 0x01	; 1
 6e2:	08 c0       	rjmp	.+16     	; 0x6f4 <_ZN11dynamixel_t3comEhhPhjhmj+0x150>

	int get(uint8_t * data, uint8_t length, uint16_t max_time)
	{
		uint16_t waiting = 0;
		uint8_t received = length;
		while(length-- != 0)
 6e4:	ee 24       	eor	r14, r14
 6e6:	ff 24       	eor	r15, r15
		{
			while(!peek(*data))
 6e8:	c6 01       	movw	r24, r12
 6ea:	b5 01       	movw	r22, r10
 6ec:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN11dynamixel_t4peekERh>
 6f0:	88 23       	and	r24, r24
 6f2:	81 f3       	breq	.-32     	; 0x6d4 <_ZN11dynamixel_t3comEhhPhjhmj+0x130>
					//pc<<"breaked"<<endl;
					break;
				}
			}
			//pc<<*data<<"rg";
			++data;
 6f4:	08 94       	sec
 6f6:	a1 1c       	adc	r10, r1
 6f8:	b1 1c       	adc	r11, r1
 6fa:	01 50       	subi	r16, 0x01	; 1

	int get(uint8_t * data, uint8_t length, uint16_t max_time)
	{
		uint16_t waiting = 0;
		uint8_t received = length;
		while(length-- != 0)
 6fc:	01 30       	cpi	r16, 0x01	; 1
 6fe:	91 f7       	brne	.-28     	; 0x6e4 <_ZN11dynamixel_t3comEhhPhjhmj+0x140>
		//pc<<returned<<'r';
		while(!peek(returned)){}
		//pc<<returned<<"re";
		uint8_t a = get(data, (returned - 1), max_time);
		//pc<<endl<<"a: "<<a<<Rlength<<endl;
		if(a == Rlength)
 700:	16 15       	cp	r17, r6
 702:	e9 f4       	brne	.+58     	; 0x73e <_ZN11dynamixel_t3comEhhPhjhmj+0x19a>
		{
			checksum = ID + returned;
 704:	89 81       	ldd	r24, Y+1	; 0x01
 706:	78 0e       	add	r7, r24
			for(uint8_t i = 0; i != returned - 1; ++i)
 708:	40 e0       	ldi	r20, 0x00	; 0
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	01 97       	sbiw	r24, 0x01	; 1
 70e:	06 c0       	rjmp	.+12     	; 0x71c <_ZN11dynamixel_t3comEhhPhjhmj+0x178>
				checksum += *(data+i);
 710:	24 0d       	add	r18, r4
 712:	35 1d       	adc	r19, r5
 714:	f9 01       	movw	r30, r18
 716:	20 81       	ld	r18, Z
 718:	72 0e       	add	r7, r18
		uint8_t a = get(data, (returned - 1), max_time);
		//pc<<endl<<"a: "<<a<<Rlength<<endl;
		if(a == Rlength)
		{
			checksum = ID + returned;
			for(uint8_t i = 0; i != returned - 1; ++i)
 71a:	4f 5f       	subi	r20, 0xFF	; 255
 71c:	24 2f       	mov	r18, r20
 71e:	30 e0       	ldi	r19, 0x00	; 0
 720:	28 17       	cp	r18, r24
 722:	39 07       	cpc	r19, r25
 724:	a9 f7       	brne	.-22     	; 0x710 <_ZN11dynamixel_t3comEhhPhjhmj+0x16c>
				checksum += *(data+i);
			checksum = ~checksum;
 726:	70 94       	com	r7
			while(!peek(returned)){}
 728:	c6 01       	movw	r24, r12
 72a:	be 01       	movw	r22, r28
 72c:	6f 5f       	subi	r22, 0xFF	; 255
 72e:	7f 4f       	sbci	r23, 0xFF	; 255
 730:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN11dynamixel_t4peekERh>
 734:	88 23       	and	r24, r24
 736:	c1 f3       	breq	.-16     	; 0x728 <_ZN11dynamixel_t3comEhhPhjhmj+0x184>
			//pc<<returned<<'r'<<endl<<"checksum: "<<checksum<<endl;
			if(checksum == returned)
 738:	89 81       	ldd	r24, Y+1	; 0x01
 73a:	78 16       	cp	r7, r24
 73c:	19 f0       	breq	.+6      	; 0x744 <_ZN11dynamixel_t3comEhhPhjhmj+0x1a0>
				//pc<<"com return 0"<<endl;
				return 0;
			}
		}
		//pc<<endl<<"spatna delka: "<<a<<Rlength<<endl;
		return -1;
 73e:	8f ef       	ldi	r24, 0xFF	; 255
 740:	9f ef       	ldi	r25, 0xFF	; 255
 742:	02 c0       	rjmp	.+4      	; 0x748 <_ZN11dynamixel_t3comEhhPhjhmj+0x1a4>
			while(!peek(returned)){}
			//pc<<returned<<'r'<<endl<<"checksum: "<<checksum<<endl;
			if(checksum == returned)
			{
				//pc<<"com return 0"<<endl;
				return 0;
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
		//pc<<endl<<"spatna delka: "<<a<<Rlength<<endl;
		return -1;
	}
 748:	0f 90       	pop	r0
 74a:	0f 90       	pop	r0
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	1f 91       	pop	r17
 752:	0f 91       	pop	r16
 754:	ff 90       	pop	r15
 756:	ef 90       	pop	r14
 758:	df 90       	pop	r13
 75a:	cf 90       	pop	r12
 75c:	bf 90       	pop	r11
 75e:	af 90       	pop	r10
 760:	9f 90       	pop	r9
 762:	8f 90       	pop	r8
 764:	7f 90       	pop	r7
 766:	6f 90       	pop	r6
 768:	5f 90       	pop	r5
 76a:	4f 90       	pop	r4
 76c:	08 95       	ret
		receive();
	}

	bool is_send()
	{
		if(!m_tx.is_empty() && ((UCSR0A & (1<<TXC0)) == 0))
 76e:	5e 9b       	sbis	0x0b, 6	; 11
 770:	79 cf       	rjmp	.-270    	; 0x664 <_ZN11dynamixel_t3comEhhPhjhmj+0xc0>
			return false;
		UCSR0A |= (1<<TXC0);
 772:	5e 9a       	sbi	0x0b, 6	; 11
		sendChar(Tlength + 2);
		sendChar(instruction);
		send(data, Tlength);
		sendChar(checksum);
		wait();
		receive();
 774:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_ZN11dynamixel_t7receiveEv.isra.1>
		while(!peek(returned) || returned != 255) {}
 778:	7f cf       	rjmp	.-258    	; 0x678 <_ZN11dynamixel_t3comEhhPhjhmj+0xd4>

0000077a <_ZN11dynamixel_t9writeWordEhhj>:
	int writeByte(uint8_t ID, uint8_t address, uint8_t data)
	{
		uint8_t repository[2] = {address, data};
		return com(ID, INST_WRITE, &repository[0], 2, DYNAMIXEL_RETURN==2?1:0, DYNAMIXEL_RESPOND_TIME)==0?repository[0]:(repository[0]|(1<<7));
	}
	int writeWord(uint8_t ID, uint8_t address, uint16_t data)
 77a:	8f 92       	push	r8
 77c:	9f 92       	push	r9
 77e:	af 92       	push	r10
 780:	bf 92       	push	r11
 782:	cf 92       	push	r12
 784:	df 92       	push	r13
 786:	ef 92       	push	r14
 788:	0f 93       	push	r16
 78a:	1f 93       	push	r17
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
 790:	00 d0       	rcall	.+0      	; 0x792 <_ZN11dynamixel_t9writeWordEhhj+0x18>
 792:	0f 92       	push	r0
 794:	cd b7       	in	r28, 0x3d	; 61
 796:	de b7       	in	r29, 0x3e	; 62
	{
		uint8_t repository[3] = {address, (data & 0x00FF), (data & 0xFF00) >> 8};
 798:	49 83       	std	Y+1, r20	; 0x01
 79a:	2a 83       	std	Y+2, r18	; 0x02
 79c:	3b 83       	std	Y+3, r19	; 0x03
		return com(ID, INST_WRITE, &repository[0], 3, DYNAMIXEL_RETURN==2?1:0, DYNAMIXEL_RESPOND_TIME)==0?repository[0]:(repository[0]|(1<<7));
 79e:	43 e0       	ldi	r20, 0x03	; 3
 7a0:	9e 01       	movw	r18, r28
 7a2:	2f 5f       	subi	r18, 0xFF	; 255
 7a4:	3f 4f       	sbci	r19, 0xFF	; 255
 7a6:	03 e0       	ldi	r16, 0x03	; 3
 7a8:	10 e0       	ldi	r17, 0x00	; 0
 7aa:	ee 24       	eor	r14, r14
 7ac:	e3 94       	inc	r14
 7ae:	54 ef       	ldi	r21, 0xF4	; 244
 7b0:	a5 2e       	mov	r10, r21
 7b2:	51 e0       	ldi	r21, 0x01	; 1
 7b4:	b5 2e       	mov	r11, r21
 7b6:	c1 2c       	mov	r12, r1
 7b8:	d1 2c       	mov	r13, r1
 7ba:	74 ef       	ldi	r23, 0xF4	; 244
 7bc:	87 2e       	mov	r8, r23
 7be:	71 e0       	ldi	r23, 0x01	; 1
 7c0:	97 2e       	mov	r9, r23
 7c2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN11dynamixel_t3comEhhPhjhmj>
 7c6:	29 81       	ldd	r18, Y+1	; 0x01
 7c8:	00 97       	sbiw	r24, 0x00	; 0
 7ca:	11 f4       	brne	.+4      	; 0x7d0 <_ZN11dynamixel_t9writeWordEhhj+0x56>
 7cc:	82 2f       	mov	r24, r18
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <_ZN11dynamixel_t9writeWordEhhj+0x5a>
 7d0:	82 2f       	mov	r24, r18
 7d2:	80 68       	ori	r24, 0x80	; 128
	}
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	0f 90       	pop	r0
 7d8:	0f 90       	pop	r0
 7da:	0f 90       	pop	r0
 7dc:	df 91       	pop	r29
 7de:	cf 91       	pop	r28
 7e0:	1f 91       	pop	r17
 7e2:	0f 91       	pop	r16
 7e4:	ef 90       	pop	r14
 7e6:	df 90       	pop	r13
 7e8:	cf 90       	pop	r12
 7ea:	bf 90       	pop	r11
 7ec:	af 90       	pop	r10
 7ee:	9f 90       	pop	r9
 7f0:	8f 90       	pop	r8
 7f2:	08 95       	ret

000007f4 <_Z6poziceh>:
cekej();
pc<<"ziju 5"<<endl;
}

void pozice(uint8_t c_pozice)
{
 7f4:	ef 92       	push	r14
 7f6:	ff 92       	push	r15
 7f8:	0f 93       	push	r16
 7fa:	1f 93       	push	r17
 7fc:	cf 93       	push	r28
 7fe:	df 93       	push	r29
	for(int i; i!=pocet_motoru; i++)
 800:	00 e0       	ldi	r16, 0x00	; 0
 802:	10 e0       	ldi	r17, 0x00	; 0
 804:	ee 24       	eor	r14, r14
 806:	ff 24       	eor	r15, r15
	}
cekej();
pc<<"ziju 5"<<endl;
}

void pozice(uint8_t c_pozice)
 808:	c8 2f       	mov	r28, r24
 80a:	d0 e0       	ldi	r29, 0x00	; 0
 80c:	cc 0f       	add	r28, r28
 80e:	dd 1f       	adc	r29, r29
 810:	c6 5e       	subi	r28, 0xE6	; 230
 812:	de 4f       	sbci	r29, 0xFE	; 254
{
	for(int i; i!=pocet_motoru; i++)
 814:	18 c0       	rjmp	.+48     	; 0x846 <_Z6poziceh+0x52>
		m_error.overwrite = true;
	}

	motor_t &operator [] (const uint8_t &id)
	{
		currentID = id;
 816:	00 93 56 03 	sts	0x0356, r16
	}
cekej();
pc<<"ziju 5"<<endl;
}

void pozice(uint8_t c_pozice)
 81a:	fe 01       	movw	r30, r28
 81c:	ee 0d       	add	r30, r14
 81e:	ff 1d       	adc	r31, r15
		m_error.push(error);
		return *this;
	}
	motor_t & position(const uint16_t &position)
	{
		m_error.push(bus.writeWord(currentID, P_GOAL_POSITION_L, position));
 820:	20 81       	ld	r18, Z
 822:	31 81       	ldd	r19, Z+1	; 0x01
 824:	8c eb       	ldi	r24, 0xBC	; 188
 826:	93 e0       	ldi	r25, 0x03	; 3
 828:	60 2f       	mov	r22, r16
 82a:	4e e1       	ldi	r20, 0x1E	; 30
 82c:	0e 94 bd 03 	call	0x77a	; 0x77a <_ZN11dynamixel_t9writeWordEhhj>
 830:	68 2f       	mov	r22, r24
 832:	87 e5       	ldi	r24, 0x57	; 87
 834:	93 e0       	ldi	r25, 0x03	; 3
 836:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5queueIhLj96EE4pushEh>
{
	for(int i; i!=pocet_motoru; i++)
 83a:	0f 5f       	subi	r16, 0xFF	; 255
 83c:	1f 4f       	sbci	r17, 0xFF	; 255
 83e:	82 e4       	ldi	r24, 0x42	; 66
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	e8 0e       	add	r14, r24
 844:	f9 1e       	adc	r15, r25
 846:	06 30       	cpi	r16, 0x06	; 6
 848:	11 05       	cpc	r17, r1
 84a:	29 f7       	brne	.-54     	; 0x816 <_Z6poziceh+0x22>
	{
		motor[i].position(hodnoty[i][c_pozice]);
	}
}
 84c:	df 91       	pop	r29
 84e:	cf 91       	pop	r28
 850:	1f 91       	pop	r17
 852:	0f 91       	pop	r16
 854:	ff 90       	pop	r15
 856:	ef 90       	pop	r14
 858:	08 95       	ret

0000085a <_Z15nastav_rychlostv>:
		else {i++;}
	} while (i!=pocet_motoru);
}

void nastav_rychlost()
{
 85a:	cf 93       	push	r28
 85c:	df 93       	push	r29
	for(int i; i!=pocet_motoru; i++)
 85e:	10 c0       	rjmp	.+32     	; 0x880 <_Z15nastav_rychlostv+0x26>
		m_error.overwrite = true;
	}

	motor_t &operator [] (const uint8_t &id)
	{
		currentID = id;
 860:	c0 93 56 03 	sts	0x0356, r28
		m_error.push(bus.writeWord(currentID, P_GOAL_SPEED_L, speed));
		return *this;
	}
	motor_t & speed(const int16_t &speed = 256)
	{
		m_error.push(bus.writeWord(currentID, P_GOAL_SPEED_L, ((uint16_t)(speed))));
 864:	8c eb       	ldi	r24, 0xBC	; 188
 866:	93 e0       	ldi	r25, 0x03	; 3
 868:	6c 2f       	mov	r22, r28
 86a:	40 e2       	ldi	r20, 0x20	; 32
 86c:	24 ef       	ldi	r18, 0xF4	; 244
 86e:	31 e0       	ldi	r19, 0x01	; 1
 870:	0e 94 bd 03 	call	0x77a	; 0x77a <_ZN11dynamixel_t9writeWordEhhj>
 874:	68 2f       	mov	r22, r24
 876:	87 e5       	ldi	r24, 0x57	; 87
 878:	93 e0       	ldi	r25, 0x03	; 3
 87a:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5queueIhLj96EE4pushEh>
 87e:	21 96       	adiw	r28, 0x01	; 1
 880:	c6 30       	cpi	r28, 0x06	; 6
 882:	d1 05       	cpc	r29, r1
 884:	69 f7       	brne	.-38     	; 0x860 <_Z15nastav_rychlostv+0x6>
	{
		motor[i].speed(rychlost_motoru);
	}
}
 886:	df 91       	pop	r29
 888:	cf 91       	pop	r28
 88a:	08 95       	ret

0000088c <_Z5cekejv>:
{512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512	},
{512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512,	512	},
};

void cekej()
{
 88c:	3f 92       	push	r3
 88e:	4f 92       	push	r4
 890:	5f 92       	push	r5
 892:	6f 92       	push	r6
 894:	7f 92       	push	r7
 896:	8f 92       	push	r8
 898:	9f 92       	push	r9
 89a:	af 92       	push	r10
 89c:	bf 92       	push	r11
 89e:	cf 92       	push	r12
 8a0:	df 92       	push	r13
 8a2:	ef 92       	push	r14
 8a4:	ff 92       	push	r15
 8a6:	0f 93       	push	r16
 8a8:	1f 93       	push	r17
 8aa:	cf 93       	push	r28
 8ac:	df 93       	push	r29
 8ae:	00 d0       	rcall	.+0      	; 0x8b0 <_Z5cekejv+0x24>
 8b0:	00 d0       	rcall	.+0      	; 0x8b2 <_Z5cekejv+0x26>
 8b2:	0f 92       	push	r0
 8b4:	cd b7       	in	r28, 0x3d	; 61
 8b6:	de b7       	in	r29, 0x3e	; 62
i=1;
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	80 93 ec 02 	sts	0x02EC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8be:	8f ef       	ldi	r24, 0xFF	; 255
 8c0:	91 ee       	ldi	r25, 0xE1	; 225
 8c2:	a4 e0       	ldi	r26, 0x04	; 4
 8c4:	81 50       	subi	r24, 0x01	; 1
 8c6:	90 40       	sbci	r25, 0x00	; 0
 8c8:	a0 40       	sbci	r26, 0x00	; 0
 8ca:	e1 f7       	brne	.-8      	; 0x8c4 <_Z5cekejv+0x38>
 8cc:	00 c0       	rjmp	.+0      	; 0x8ce <_Z5cekejv+0x42>
 8ce:	00 00       	nop
		data = repository[1];
		return repository[0];
	}
	int readWord(uint8_t ID, uint8_t address, uint16_t &data)
	{
		uint8_t repository[3] = {address, 2};
 8d0:	13 e0       	ldi	r17, 0x03	; 3
 8d2:	f1 2e       	mov	r15, r17
 8d4:	3e 01       	movw	r6, r28
 8d6:	08 94       	sec
 8d8:	61 1c       	adc	r6, r1
 8da:	71 1c       	adc	r7, r1
 8dc:	02 e0       	ldi	r16, 0x02	; 2
 8de:	50 2e       	mov	r5, r16
 8e0:	86 e2       	ldi	r24, 0x26	; 38
 8e2:	48 2e       	mov	r4, r24
_delay_ms(100);
	do 
	{
		if (motor[i].present_speed()>10)	{i=1;}
 8e4:	33 24       	eor	r3, r3
 8e6:	33 94       	inc	r3
 8e8:	60 91 ec 02 	lds	r22, 0x02EC
		m_error.overwrite = true;
	}

	motor_t &operator [] (const uint8_t &id)
	{
		currentID = id;
 8ec:	60 93 56 03 	sts	0x0356, r22
		data = repository[1];
		return repository[0];
	}
	int readWord(uint8_t ID, uint8_t address, uint16_t &data)
	{
		uint8_t repository[3] = {address, 2};
 8f0:	d3 01       	movw	r26, r6
 8f2:	ef 2d       	mov	r30, r15
 8f4:	1d 92       	st	X+, r1
 8f6:	ea 95       	dec	r30
 8f8:	e9 f7       	brne	.-6      	; 0x8f4 <_Z5cekejv+0x68>
 8fa:	5a 82       	std	Y+2, r5	; 0x02
 8fc:	49 82       	std	Y+1, r4	; 0x01
		repository[0] = com(ID, INST_READ, &repository[0], 2, DYNAMIXEL_RETURN!=0?3:0, DYNAMIXEL_RESPOND_TIME)==0?repository[0]:(repository[0]|(1<<7));
 8fe:	8c eb       	ldi	r24, 0xBC	; 188
 900:	93 e0       	ldi	r25, 0x03	; 3
 902:	42 e0       	ldi	r20, 0x02	; 2
 904:	93 01       	movw	r18, r6
 906:	02 e0       	ldi	r16, 0x02	; 2
 908:	10 e0       	ldi	r17, 0x00	; 0
 90a:	f3 e0       	ldi	r31, 0x03	; 3
 90c:	ef 2e       	mov	r14, r31
 90e:	a4 ef       	ldi	r26, 0xF4	; 244
 910:	aa 2e       	mov	r10, r26
 912:	a1 e0       	ldi	r26, 0x01	; 1
 914:	ba 2e       	mov	r11, r26
 916:	c1 2c       	mov	r12, r1
 918:	d1 2c       	mov	r13, r1
 91a:	b4 ef       	ldi	r27, 0xF4	; 244
 91c:	8b 2e       	mov	r8, r27
 91e:	b1 e0       	ldi	r27, 0x01	; 1
 920:	9b 2e       	mov	r9, r27
 922:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN11dynamixel_t3comEhhPhjhmj>
 926:	69 81       	ldd	r22, Y+1	; 0x01
 928:	00 97       	sbiw	r24, 0x00	; 0
 92a:	09 f0       	breq	.+2      	; 0x92e <_Z5cekejv+0xa2>
 92c:	60 68       	ori	r22, 0x80	; 128
 92e:	69 83       	std	Y+1, r22	; 0x01
		data = repository[1] | (repository[2] << 8);
 930:	fb 81       	ldd	r31, Y+3	; 0x03
 932:	fd 83       	std	Y+5, r31	; 0x05
 934:	1c 82       	std	Y+4, r1	; 0x04
 936:	0a 81       	ldd	r16, Y+2	; 0x02
 938:	10 e0       	ldi	r17, 0x00	; 0
 93a:	8c 81       	ldd	r24, Y+4	; 0x04
 93c:	9d 81       	ldd	r25, Y+5	; 0x05
 93e:	08 2b       	or	r16, r24
 940:	19 2b       	or	r17, r25
	}
	//__________________________________________________________________________________;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;**************************************************
	uint16_t present_speed()
	{
		uint16_t sped;
		m_error.push(bus.readWord(currentID, P_PRESENT_SPEED_L, sped));
 942:	87 e5       	ldi	r24, 0x57	; 87
 944:	93 e0       	ldi	r25, 0x03	; 3
 946:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5queueIhLj96EE4pushEh>
 94a:	0b 30       	cpi	r16, 0x0B	; 11
 94c:	11 05       	cpc	r17, r1
 94e:	18 f0       	brcs	.+6      	; 0x956 <_Z5cekejv+0xca>
 950:	30 92 ec 02 	sts	0x02EC, r3
 954:	05 c0       	rjmp	.+10     	; 0x960 <_Z5cekejv+0xd4>
		else {i++;}
 956:	80 91 ec 02 	lds	r24, 0x02EC
 95a:	8f 5f       	subi	r24, 0xFF	; 255
 95c:	80 93 ec 02 	sts	0x02EC, r24

void cekej()
{
i=1;
_delay_ms(100);
	do 
 960:	80 91 ec 02 	lds	r24, 0x02EC
 964:	86 30       	cpi	r24, 0x06	; 6
 966:	09 f0       	breq	.+2      	; 0x96a <_Z5cekejv+0xde>
 968:	bf cf       	rjmp	.-130    	; 0x8e8 <_Z5cekejv+0x5c>
	{
		if (motor[i].present_speed()>10)	{i=1;}
		else {i++;}
	} while (i!=pocet_motoru);
}
 96a:	0f 90       	pop	r0
 96c:	0f 90       	pop	r0
 96e:	0f 90       	pop	r0
 970:	0f 90       	pop	r0
 972:	0f 90       	pop	r0
 974:	df 91       	pop	r29
 976:	cf 91       	pop	r28
 978:	1f 91       	pop	r17
 97a:	0f 91       	pop	r16
 97c:	ff 90       	pop	r15
 97e:	ef 90       	pop	r14
 980:	df 90       	pop	r13
 982:	cf 90       	pop	r12
 984:	bf 90       	pop	r11
 986:	af 90       	pop	r10
 988:	9f 90       	pop	r9
 98a:	8f 90       	pop	r8
 98c:	7f 90       	pop	r7
 98e:	6f 90       	pop	r6
 990:	5f 90       	pop	r5
 992:	4f 90       	pop	r4
 994:	3f 90       	pop	r3
 996:	08 95       	ret

00000998 <_Z15zakladni_pozicev>:
		motor[i].speed(rychlost_motoru);
	}
}

void zakladni_pozice()
{
 998:	1f 93       	push	r17
 99a:	cf 93       	push	r28
 99c:	df 93       	push	r29
 99e:	cc e5       	ldi	r28, 0x5C	; 92
 9a0:	d1 e0       	ldi	r29, 0x01	; 1
 9a2:	11 e0       	ldi	r17, 0x01	; 1
		m_error.overwrite = true;
	}

	motor_t &operator [] (const uint8_t &id)
	{
		currentID = id;
 9a4:	10 93 56 03 	sts	0x0356, r17
		m_error.push(error);
		return *this;
	}
	motor_t & position(const uint16_t &position)
	{
		m_error.push(bus.writeWord(currentID, P_GOAL_POSITION_L, position));
 9a8:	28 81       	ld	r18, Y
 9aa:	39 81       	ldd	r19, Y+1	; 0x01
 9ac:	8c eb       	ldi	r24, 0xBC	; 188
 9ae:	93 e0       	ldi	r25, 0x03	; 3
 9b0:	61 2f       	mov	r22, r17
 9b2:	4e e1       	ldi	r20, 0x1E	; 30
 9b4:	0e 94 bd 03 	call	0x77a	; 0x77a <_ZN11dynamixel_t9writeWordEhhj>
 9b8:	68 2f       	mov	r22, r24
 9ba:	87 e5       	ldi	r24, 0x57	; 87
 9bc:	93 e0       	ldi	r25, 0x03	; 3
 9be:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5queueIhLj96EE4pushEh>
 9c2:	1f 5f       	subi	r17, 0xFF	; 255
 9c4:	ce 5b       	subi	r28, 0xBE	; 190
 9c6:	df 4f       	sbci	r29, 0xFF	; 255
	for(int i=1; i!=pocet_motoru; i++)
 9c8:	16 30       	cpi	r17, 0x06	; 6
 9ca:	61 f7       	brne	.-40     	; 0x9a4 <_Z15zakladni_pozicev+0xc>
	{
		motor[i].position(hodnoty[i][0]);
	}
cekej();
 9cc:	0e 94 46 04 	call	0x88c	; 0x88c <_Z5cekejv>
		sendChar(ch);
		return *this;
	}
	USART1_t &operator << (const char *ch)
	{
		send(ch);
 9d0:	8a e8       	ldi	r24, 0x8A	; 138
 9d2:	94 e0       	ldi	r25, 0x04	; 4
 9d4:	60 e0       	ldi	r22, 0x00	; 0
 9d6:	71 e0       	ldi	r23, 0x01	; 1
 9d8:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN8USART1_t4sendEPKc>
 9dc:	8a e8       	ldi	r24, 0x8A	; 138
 9de:	94 e0       	ldi	r25, 0x04	; 4
 9e0:	67 e0       	ldi	r22, 0x07	; 7
 9e2:	71 e0       	ldi	r23, 0x01	; 1
 9e4:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN8USART1_t4sendEPKc>
pc<<"ziju 5"<<endl;
}
 9e8:	df 91       	pop	r29
 9ea:	cf 91       	pop	r28
 9ec:	1f 91       	pop	r17
 9ee:	08 95       	ret

000009f0 <_Z3runv>:
		m_error.overwrite = true;
	}

	motor_t &operator [] (const uint8_t &id)
	{
		currentID = id;
 9f0:	c4 e0       	ldi	r28, 0x04	; 4
void run()
{
	//nastav_rychlost();
	for (;;)
	{
		zakladni_pozice();		
 9f2:	0e 94 cc 04 	call	0x998	; 0x998 <_Z15zakladni_pozicev>
 9f6:	c0 93 56 03 	sts	0x0356, r28
		m_error.push(bus.writeWord(currentID, P_GOAL_POSITION_L, position));
		return *this;
	}
	motor_t & position(const int16_t &position)
	{
		m_error.push(bus.writeWord(currentID, P_GOAL_POSITION_L, ((uint16_t)(position))));
 9fa:	8c eb       	ldi	r24, 0xBC	; 188
 9fc:	93 e0       	ldi	r25, 0x03	; 3
 9fe:	64 e0       	ldi	r22, 0x04	; 4
 a00:	4e e1       	ldi	r20, 0x1E	; 30
 a02:	20 e3       	ldi	r18, 0x30	; 48
 a04:	32 e0       	ldi	r19, 0x02	; 2
 a06:	0e 94 bd 03 	call	0x77a	; 0x77a <_ZN11dynamixel_t9writeWordEhhj>
 a0a:	68 2f       	mov	r22, r24
 a0c:	87 e5       	ldi	r24, 0x57	; 87
 a0e:	93 e0       	ldi	r25, 0x03	; 3
 a10:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5queueIhLj96EE4pushEh>
		motor[4].position(560);
		cekej();
 a14:	0e 94 46 04 	call	0x88c	; 0x88c <_Z5cekejv>
		sendChar(ch);
		return *this;
	}
	USART1_t &operator << (const char *ch)
	{
		send(ch);
 a18:	8a e8       	ldi	r24, 0x8A	; 138
 a1a:	94 e0       	ldi	r25, 0x04	; 4
 a1c:	6a e0       	ldi	r22, 0x0A	; 10
 a1e:	71 e0       	ldi	r23, 0x01	; 1
 a20:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN8USART1_t4sendEPKc>
 a24:	8a e8       	ldi	r24, 0x8A	; 138
 a26:	94 e0       	ldi	r25, 0x04	; 4
 a28:	67 e0       	ldi	r22, 0x07	; 7
 a2a:	71 e0       	ldi	r23, 0x01	; 1
 a2c:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN8USART1_t4sendEPKc>
 a30:	e0 cf       	rjmp	.-64     	; 0x9f2 <_Z3runv+0x2>

00000a32 <__vector_19>:
	if((UCSR0A & (1<<FE0)) == (1<<FE0))
		return;
	bus.data_in(ch);
}
ISR(USART0_UDRE_vect)
{
 a32:	1f 92       	push	r1
 a34:	0f 92       	push	r0
 a36:	0f b6       	in	r0, 0x3f	; 63
 a38:	0f 92       	push	r0
 a3a:	0b b6       	in	r0, 0x3b	; 59
 a3c:	0f 92       	push	r0
 a3e:	11 24       	eor	r1, r1
 a40:	2f 93       	push	r18
 a42:	3f 93       	push	r19
 a44:	4f 93       	push	r20
 a46:	5f 93       	push	r21
 a48:	6f 93       	push	r22
 a4a:	7f 93       	push	r23
 a4c:	8f 93       	push	r24
 a4e:	9f 93       	push	r25
 a50:	af 93       	push	r26
 a52:	bf 93       	push	r27
 a54:	ef 93       	push	r30
 a56:	ff 93       	push	r31
	volatile uint16_t m_write;
public:
	volatile bool overwrite;
	bool is_empty() const
	{
		if(m_write == m_read)
 a58:	20 91 83 04 	lds	r18, 0x0483
 a5c:	30 91 84 04 	lds	r19, 0x0484
 a60:	80 91 81 04 	lds	r24, 0x0481
 a64:	90 91 82 04 	lds	r25, 0x0482
 a68:	28 17       	cp	r18, r24
 a6a:	39 07       	cpc	r19, r25
 a6c:	11 f4       	brne	.+4      	; 0xa72 <__vector_19+0x40>
	}
	else
	{
		//PORTE &= ~(1<<PE2);
		//PORTE |= (1<<PE3);
		UCSR0B &= ~(1<<UDRIE0);
 a6e:	55 98       	cbi	0x0a, 5	; 10
 a70:	05 c0       	rjmp	.+10     	; 0xa7c <__vector_19+0x4a>

	bool data_out(uint8_t &ch)
	{
		if(m_tx.is_empty())
			return false;
		ch = m_tx.pop();
 a72:	81 e2       	ldi	r24, 0x21	; 33
 a74:	94 e0       	ldi	r25, 0x04	; 4
 a76:	0e 94 92 02 	call	0x524	; 0x524 <_ZN5queueIhLj96EE3popEv>
	uint8_t data;
	if(bus.data_out(data))
	{
		//PORTE &= ~(1<<PE3);
		//PORTE |= (1<<PE2);
		UDR0 = data;
 a7a:	8c b9       	out	0x0c, r24	; 12
	{
		//PORTE &= ~(1<<PE2);
		//PORTE |= (1<<PE3);
		UCSR0B &= ~(1<<UDRIE0);
	}
}
 a7c:	ff 91       	pop	r31
 a7e:	ef 91       	pop	r30
 a80:	bf 91       	pop	r27
 a82:	af 91       	pop	r26
 a84:	9f 91       	pop	r25
 a86:	8f 91       	pop	r24
 a88:	7f 91       	pop	r23
 a8a:	6f 91       	pop	r22
 a8c:	5f 91       	pop	r21
 a8e:	4f 91       	pop	r20
 a90:	3f 91       	pop	r19
 a92:	2f 91       	pop	r18
 a94:	0f 90       	pop	r0
 a96:	0b be       	out	0x3b, r0	; 59
 a98:	0f 90       	pop	r0
 a9a:	0f be       	out	0x3f, r0	; 63
 a9c:	0f 90       	pop	r0
 a9e:	1f 90       	pop	r1
 aa0:	18 95       	reti

00000aa2 <main>:
void run();

int main()
{
	//LEDs initialization
	DDRC = (1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3)|(1<<PC4)|(1<<PC5)|(1<<PC6);
 aa2:	8f e7       	ldi	r24, 0x7F	; 127
 aa4:	84 bb       	out	0x14, r24	; 20
	PORTC = (1<<PC1)|(1<<PC2)|(1<<PC3)|(1<<PC4)|(1<<PC5)|(1<<PC6);
 aa6:	8e e7       	ldi	r24, 0x7E	; 126
 aa8:	85 bb       	out	0x15, r24	; 21
	//buttons initialization
	DDRE = (1<<PE2)|(1<<PE3);
 aaa:	8c e0       	ldi	r24, 0x0C	; 12
 aac:	82 b9       	out	0x02, r24	; 2
	PORTE = (1<<PE7)|(1<<PE6)|(1<<PE5)|(1<<PE4)|(1<<PE0);
 aae:	81 ef       	ldi	r24, 0xF1	; 241
 ab0:	83 b9       	out	0x03, r24	; 3
	DDRD = (1<<PD5);
 ab2:	80 e2       	ldi	r24, 0x20	; 32
 ab4:	81 bb       	out	0x11, r24	; 17
	PORTD = (1<<PD0)|(1<<PD5);
 ab6:	81 e2       	ldi	r24, 0x21	; 33
 ab8:	82 bb       	out	0x12, r24	; 18
		return true;
	}

	void init(uint32_t speed)
	{
		m_tx.overwrite = false;
 aba:	10 92 53 05 	sts	0x0553, r1
		m_rx.overwrite = false;
 abe:	10 92 ee 04 	sts	0x04EE, r1
		UCSR1A = (1<<U2X1);
 ac2:	d2 e0       	ldi	r29, 0x02	; 2
 ac4:	d0 93 9b 00 	sts	0x009B, r29
		UCSR1B = ((1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1));
 ac8:	98 e9       	ldi	r25, 0x98	; 152
 aca:	90 93 9a 00 	sts	0x009A, r25
		UCSR1C = ((1<<UCSZ10)|(1<<UCSZ11));
 ace:	86 e0       	ldi	r24, 0x06	; 6
 ad0:	80 93 9d 00 	sts	0x009D, r24
		speed = (((F_CPU/(float(8*speed)))-1)-((F_CPU/(8*speed))-1))<0.5?((F_CPU/(8*speed))-1):((F_CPU/(8*speed)));
		UBRR1H = ((speed&0xFF00)>>8);
 ad4:	10 92 98 00 	sts	0x0098, r1
		UBRR1L = (speed&0x00FF);
 ad8:	22 e2       	ldi	r18, 0x22	; 34
 ada:	20 93 99 00 	sts	0x0099, r18
		numbersSpaces = 1;
 ade:	c1 e0       	ldi	r28, 0x01	; 1
 ae0:	c0 93 54 05 	sts	0x0554, r28
		cin_isFirst = true;
 ae4:	c0 93 55 05 	sts	0x0555, r28
		cin_isGood = true;
 ae8:	c0 93 77 05 	sts	0x0577, r28
		UCSR0B = (1<<RXCIE0)|(1<<RXEN0);
	}

	void init(uint32_t speed)
	{
		m_tx.overwrite = false;
 aec:	10 92 85 04 	sts	0x0485, r1
		m_rx.overwrite = false;
 af0:	10 92 20 04 	sts	0x0420, r1
		UCSR0A = (1<<U2X0);
 af4:	db b9       	out	0x0b, r29	; 11
		UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 af6:	9a b9       	out	0x0a, r25	; 10
		UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
 af8:	80 93 95 00 	sts	0x0095, r24
		speed = (((F_CPU/(float(8*speed)))-1)-((F_CPU/(8*speed))-1))<0.5?((F_CPU/(8*speed))-1):((F_CPU/(8*speed)));
		UBRR0H = ((speed&0xFF00)>>8);
 afc:	10 92 90 00 	sts	0x0090, r1
		UBRR0L = (speed&0x00FF);
 b00:	c9 b9       	out	0x09, r28	; 9
		DDRE |= (1<<PE2)|(1<<PE3);
 b02:	82 b1       	in	r24, 0x02	; 2
 b04:	8c 60       	ori	r24, 0x0C	; 12
 b06:	82 b9       	out	0x02, r24	; 2
		receive();
 b08:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_ZN11dynamixel_t7receiveEv.isra.1>
	// Initialize the RS232 line to PC
	pc.init(DYNAMIXEL_PC_BPS);
	//Dynamixel bus initialization
	bus.init(DYNAMIXEL_BUS_BPS);
	//stopwatch initialization
	TIMSK = (1<<TOIE0);
 b0c:	c7 bf       	out	0x37, r28	; 55
	TCCR0 = (1<<CS01);
 b0e:	d3 bf       	out	0x33, r29	; 51
	//starting program
	sei();
 b10:	78 94       	sei
	syncWait(1000);
 b12:	68 ee       	ldi	r22, 0xE8	; 232
 b14:	73 e0       	ldi	r23, 0x03	; 3
 b16:	80 e0       	ldi	r24, 0x00	; 0
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z8syncWaitm>
	pc.send("\n\n\r  ok \n\r");
 b1e:	8a e8       	ldi	r24, 0x8A	; 138
 b20:	94 e0       	ldi	r25, 0x04	; 4
 b22:	6f e0       	ldi	r22, 0x0F	; 15
 b24:	71 e0       	ldi	r23, 0x01	; 1
 b26:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN8USART1_t4sendEPKc>
	volatile uint16_t m_write;
public:
	volatile bool overwrite;
	bool is_empty() const
	{
		if(m_write == m_read)
 b2a:	20 91 51 05 	lds	r18, 0x0551
 b2e:	30 91 52 05 	lds	r19, 0x0552
 b32:	80 91 4f 05 	lds	r24, 0x054F
 b36:	90 91 50 05 	lds	r25, 0x0550
 b3a:	28 17       	cp	r18, r24
 b3c:	39 07       	cpc	r19, r25
 b3e:	21 f0       	breq	.+8      	; 0xb48 <main+0xa6>
		return true;
	}

	bool is_send() const
	{
		if(!m_tx.is_empty() && ((UCSR1A & (1<<TXC1)) == 0))
 b40:	80 91 9b 00 	lds	r24, 0x009B
 b44:	86 ff       	sbrs	r24, 6
 b46:	f1 cf       	rjmp	.-30     	; 0xb2a <main+0x88>
			return false;
		UCSR1A |= (1<<TXC1);
 b48:	80 91 9b 00 	lds	r24, 0x009B
 b4c:	80 64       	ori	r24, 0x40	; 64
 b4e:	80 93 9b 00 	sts	0x009B, r24
	//starting program
	sei();
	syncWait(1000);
	pc.send("\n\n\r  ok \n\r");
	pc.wait();
	run();//user program
 b52:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_Z3runv>

00000b56 <_GLOBAL__sub_I__Z3absl>:
	uint8_t pointer;
public:
	string()
	{
		//m_size = STRING_DEFAULT_SIZE;
		for(pointer = 0; pointer != m_size; ++pointer)
 b56:	80 e0       	ldi	r24, 0x00	; 0
 b58:	06 c0       	rjmp	.+12     	; 0xb66 <_GLOBAL__sub_I__Z3absl+0x10>
			m_data[pointer] = 0;
 b5a:	e8 2f       	mov	r30, r24
 b5c:	f0 e0       	ldi	r31, 0x00	; 0
 b5e:	ea 5a       	subi	r30, 0xAA	; 170
 b60:	fa 4f       	sbci	r31, 0xFA	; 250
 b62:	10 82       	st	Z, r1
 b64:	8f 5f       	subi	r24, 0xFF	; 255
	uint8_t pointer;
public:
	string()
	{
		//m_size = STRING_DEFAULT_SIZE;
		for(pointer = 0; pointer != m_size; ++pointer)
 b66:	80 32       	cpi	r24, 0x20	; 32
 b68:	c1 f7       	brne	.-16     	; 0xb5a <_GLOBAL__sub_I__Z3absl+0x4>
			m_data[pointer] = 0;
		pointer = 0;
 b6a:	10 92 76 05 	sts	0x0576, r1
	uint8_t currentID;
	queue <uint8_t, AX_ERROR_BUF> m_error;

	motor_t()
	{
		m_error.overwrite = true;
 b6e:	81 e0       	ldi	r24, 0x01	; 1
 b70:	80 93 bb 03 	sts	0x03BB, r24
	uint8_t currentID;
	queue <uint8_t, AX_ERROR_BUF> m_error;

	sensor_t()
	{
		m_error.overwrite = true;
 b74:	80 93 55 03 	sts	0x0355, r24
		currentID = 100;
 b78:	84 e6       	ldi	r24, 0x64	; 100
 b7a:	80 93 f0 02 	sts	0x02F0, r24
		pc<<"ahoj"<<endl;
		//TODO: Program
	}
 b7e:	08 95       	ret

00000b80 <__tablejump_elpm__>:
 b80:	07 90       	elpm	r0, Z+
 b82:	f6 91       	elpm	r31, Z
 b84:	e0 2d       	mov	r30, r0
 b86:	09 94       	ijmp

00000b88 <_exit>:
 b88:	f8 94       	cli

00000b8a <__stop_program>:
 b8a:	ff cf       	rjmp	.-2      	; 0xb8a <__stop_program>
